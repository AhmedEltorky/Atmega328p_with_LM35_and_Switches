
Atmega328p_with_LM35_and_Switches.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000cca  00000d3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000d56  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000db4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dfb  00000000  00000000  00000e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000087a  00000000  00000000  00001c67  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005ec  00000000  00000000  000024e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  00002ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046e  00000000  00000000  00002c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007e6  00000000  00000000  000030de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000038c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_3>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__vector_21>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ec       	ldi	r30, 0xCA	; 202
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <main>
  8e:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <LCD_CmdWrite>:
    LCD_CmdWrite(0x80); // Move the CuRSor to FiRSt line FiRSt Position
}

void LCD_CmdWrite(char cmd)
{
    databus = (cmd & 0xF0);    // Send the Higher Nibble of the command to LCD
  96:	98 2f       	mov	r25, r24
  98:	90 7f       	andi	r25, 0xF0	; 240
  9a:	9b b9       	out	0x0b, r25	; 11
    control_bus &= ~(1 << RS); // Select the Command Register by pulling RS LOW
  9c:	58 98       	cbi	0x0b, 0	; 11
    control_bus |= 1 << EN;    // Send a High-to-Low pulse to enable Pin
  9e:	59 9a       	sbi	0x0b, 1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	e9 ef       	ldi	r30, 0xF9	; 249
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <LCD_CmdWrite+0xe>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <LCD_CmdWrite+0x14>
  aa:	00 00       	nop
    _delay_ms(1);
    control_bus &= ~(1 << EN);
  ac:	59 98       	cbi	0x0b, 1	; 11
  ae:	e1 ee       	ldi	r30, 0xE1	; 225
  b0:	f4 e0       	ldi	r31, 0x04	; 4
  b2:	31 97       	sbiw	r30, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <LCD_CmdWrite+0x1c>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <LCD_CmdWrite+0x22>
  b8:	00 00       	nop
    _delay_ms(5); // wait for some time

    databus = ((cmd << 4) & 0xF0); // Send the Lower Nibble of the command to LCD
  ba:	f0 e1       	ldi	r31, 0x10	; 16
  bc:	8f 9f       	mul	r24, r31
  be:	c0 01       	movw	r24, r0
  c0:	11 24       	eor	r1, r1
  c2:	8b b9       	out	0x0b, r24	; 11
    control_bus &= ~(1 << RS);     // Select the Command Register by pulling RS LOW
  c4:	58 98       	cbi	0x0b, 0	; 11
    control_bus |= 1 << EN;        // Send a High-to-Low Pulse to enable Pin
  c6:	59 9a       	sbi	0x0b, 1	; 11
  c8:	89 ef       	ldi	r24, 0xF9	; 249
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_CmdWrite+0x36>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCD_CmdWrite+0x3c>
  d2:	00 00       	nop
    _delay_ms(1);
    control_bus &= ~(1 << EN);
  d4:	59 98       	cbi	0x0b, 1	; 11
  d6:	e1 ee       	ldi	r30, 0xE1	; 225
  d8:	f4 e0       	ldi	r31, 0x04	; 4
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <LCD_CmdWrite+0x44>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <LCD_CmdWrite+0x4a>
  e0:	00 00       	nop
  e2:	08 95       	ret

000000e4 <LCD_Init>:
  e4:	83 ed       	ldi	r24, 0xD3	; 211
  e6:	90 e3       	ldi	r25, 0x30	; 48
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCD_Init+0x4>
  ec:	00 c0       	rjmp	.+0      	; 0xee <LCD_Init+0xa>
  ee:	00 00       	nop
#include "lcdlib.h"

void LCD_Init()
{
    _delay_ms(50);
    databus_direction |= 0xF0; // Configure both databus and controlbus as output
  f0:	8a b1       	in	r24, 0x0a	; 10
  f2:	80 6f       	ori	r24, 0xF0	; 240
  f4:	8a b9       	out	0x0a, r24	; 10
    control_direction |= (1 << RS);
  f6:	50 9a       	sbi	0x0a, 0	; 10
    control_direction |= (1 << EN);
  f8:	51 9a       	sbi	0x0a, 1	; 10
    LCD_CmdWrite(0x02); //Initilize the LCD in 4bit Mode
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_CmdWrite>
    LCD_CmdWrite(0x28);
 100:	88 e2       	ldi	r24, 0x28	; 40
 102:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_CmdWrite>
    LCD_CmdWrite(0x0E); // Display ON cuRSor ON
 106:	8e e0       	ldi	r24, 0x0E	; 14
 108:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_CmdWrite>
    LCD_CmdWrite(0x01); // Clear the LCD
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_CmdWrite>
    LCD_CmdWrite(0x80); // Move the CuRSor to FiRSt line FiRSt Position
 112:	80 e8       	ldi	r24, 0x80	; 128
 114:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_CmdWrite>
 118:	08 95       	ret

0000011a <LCD_DataWrite>:
    _delay_ms(5);
}

void LCD_DataWrite(char dat)
{
    databus = (dat & 0xF0);   // Send the Higher Nibble of the Data to LCD
 11a:	98 2f       	mov	r25, r24
 11c:	90 7f       	andi	r25, 0xF0	; 240
 11e:	9b b9       	out	0x0b, r25	; 11
    control_bus |= (1 << RS); // Select the Data Register by pulling RS HIGH
 120:	58 9a       	sbi	0x0b, 0	; 11
    control_bus |= (1 << EN); // Send a High-to-Low Pulse to Enable Pin
 122:	59 9a       	sbi	0x0b, 1	; 11
 124:	e9 ef       	ldi	r30, 0xF9	; 249
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	31 97       	sbiw	r30, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCD_DataWrite+0xe>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LCD_DataWrite+0x14>
 12e:	00 00       	nop
    _delay_ms(1);
    control_bus &= ~(1 << EN);
 130:	59 98       	cbi	0x0b, 1	; 11
 132:	e3 ef       	ldi	r30, 0xF3	; 243
 134:	f1 e0       	ldi	r31, 0x01	; 1
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_DataWrite+0x1c>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <LCD_DataWrite+0x22>
 13c:	00 00       	nop
    _delay_ms(2);

    databus = ((dat << 4) & 0xF0); // SENd the Lower Nibble of the Data to LCD
 13e:	f0 e1       	ldi	r31, 0x10	; 16
 140:	8f 9f       	mul	r24, r31
 142:	c0 01       	movw	r24, r0
 144:	11 24       	eor	r1, r1
 146:	8b b9       	out	0x0b, r24	; 11
    control_bus |= (1 << RS);      // Select the Data Register by pulling RS HIGH
 148:	58 9a       	sbi	0x0b, 0	; 11
    control_bus |= (1 << EN);      // Send a High-to-Low Pulse to Enable Pin
 14a:	59 9a       	sbi	0x0b, 1	; 11
 14c:	89 ef       	ldi	r24, 0xF9	; 249
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_DataWrite+0x36>
 154:	00 c0       	rjmp	.+0      	; 0x156 <LCD_DataWrite+0x3c>
 156:	00 00       	nop
    _delay_ms(1);
    control_bus &= ~(1 << EN);
 158:	59 98       	cbi	0x0b, 1	; 11
 15a:	e3 ef       	ldi	r30, 0xF3	; 243
 15c:	f1 e0       	ldi	r31, 0x01	; 1
 15e:	31 97       	sbiw	r30, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <LCD_DataWrite+0x44>
 162:	00 c0       	rjmp	.+0      	; 0x164 <LCD_DataWrite+0x4a>
 164:	00 00       	nop
 166:	08 95       	ret

00000168 <lcd_write_string>:
    _delay_ms(2);
}

void lcd_write_string(char *str)
{
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	ec 01       	movw	r28, r24
    int i = 0;
    while (str[i] != '\0')
 16e:	88 81       	ld	r24, Y
 170:	88 23       	and	r24, r24
 172:	31 f0       	breq	.+12     	; 0x180 <lcd_write_string+0x18>
 174:	21 96       	adiw	r28, 0x01	; 1
    {
        LCD_DataWrite(str[i++]); // print the current char then increase i by one
 176:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_DataWrite>
}

void lcd_write_string(char *str)
{
    int i = 0;
    while (str[i] != '\0')
 17a:	89 91       	ld	r24, Y+
 17c:	81 11       	cpse	r24, r1
 17e:	fb cf       	rjmp	.-10     	; 0x176 <lcd_write_string+0xe>
    {
        LCD_DataWrite(str[i++]); // print the current char then increase i by one
    }
}
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <lcd_write_int>:

void lcd_write_int(int val)
{
 186:	0f 93       	push	r16
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	00 d0       	rcall	.+0      	; 0x190 <lcd_write_int+0xa>
 190:	00 d0       	rcall	.+0      	; 0x192 <lcd_write_int+0xc>
 192:	1f 92       	push	r1
 194:	cd b7       	in	r28, 0x3d	; 61
 196:	de b7       	in	r29, 0x3e	; 62
    char str[5];
    sprintf(str, "%d", val);
 198:	9f 93       	push	r25
 19a:	8f 93       	push	r24
 19c:	83 e0       	ldi	r24, 0x03	; 3
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	9f 93       	push	r25
 1a2:	8f 93       	push	r24
 1a4:	8e 01       	movw	r16, r28
 1a6:	0f 5f       	subi	r16, 0xFF	; 255
 1a8:	1f 4f       	sbci	r17, 0xFF	; 255
 1aa:	1f 93       	push	r17
 1ac:	0f 93       	push	r16
 1ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <sprintf>
    lcd_write_string(str);
 1b2:	c8 01       	movw	r24, r16
 1b4:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_write_string>
}
 1b8:	0f 90       	pop	r0
 1ba:	0f 90       	pop	r0
 1bc:	0f 90       	pop	r0
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
 1c2:	0f 90       	pop	r0
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	0f 90       	pop	r0
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	08 95       	ret

000001d8 <main>:
#include "lcd/lcdlib.h"

int main(void)
{
	// LCD initialization
	LCD_Init();
 1d8:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_Init>
	// ADC initialization
	ADMUX |= (1 << REFS0);												// select AVCC as volt reference
 1dc:	ec e7       	ldi	r30, 0x7C	; 124
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	80 64       	ori	r24, 0x40	; 64
 1e4:	80 83       	st	Z, r24
	ADMUX &= ~(1 << MUX0) & ~(1 << MUX1) & ~(1 << MUX2) & ~(1 << MUX3); // select the ADC0 from multiplexer
 1e6:	80 81       	ld	r24, Z
 1e8:	80 7f       	andi	r24, 0xF0	; 240
 1ea:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2);												// set the ADC prescaler to 16 ==> ADC feq. = 1M / 16 = 62.5 KHz
 1ec:	ea e7       	ldi	r30, 0x7A	; 122
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	84 60       	ori	r24, 0x04	; 4
 1f4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);												// enable ADC interrupt
 1f6:	80 81       	ld	r24, Z
 1f8:	88 60       	ori	r24, 0x08	; 8
 1fa:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);												// enable the ADC
 1fc:	80 81       	ld	r24, Z
 1fe:	80 68       	ori	r24, 0x80	; 128
 200:	80 83       	st	Z, r24
	// pin change interrupt initial
	PCICR |= (1 << PCIE0);									 // set the pin change interrupt for group 0
 202:	a8 e6       	ldi	r26, 0x68	; 104
 204:	b0 e0       	ldi	r27, 0x00	; 0
 206:	8c 91       	ld	r24, X
 208:	81 60       	ori	r24, 0x01	; 1
 20a:	8c 93       	st	X, r24
	PCMSK0 |= (1 << PCINT0) | (1 << PCINT1) | (1 << PCINT2); // set the PCINT for pin 0, 1 and 2
 20c:	ab e6       	ldi	r26, 0x6B	; 107
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	8c 91       	ld	r24, X
 212:	87 60       	ori	r24, 0x07	; 7
 214:	8c 93       	st	X, r24

	sei();				   // set global interrupt
 216:	78 94       	sei
	ADCSRA |= (1 << ADSC); // start the ADC conversion
 218:	80 81       	ld	r24, Z
 21a:	80 64       	ori	r24, 0x40	; 64
 21c:	80 83       	st	Z, r24
 21e:	ff cf       	rjmp	.-2      	; 0x21e <main+0x46>

00000220 <__vector_3>:
	{
	}
}

ISR(PCINT0_vect)
{
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	2f 93       	push	r18
 22c:	3f 93       	push	r19
 22e:	4f 93       	push	r20
 230:	5f 93       	push	r21
 232:	6f 93       	push	r22
 234:	7f 93       	push	r23
 236:	8f 93       	push	r24
 238:	9f 93       	push	r25
 23a:	af 93       	push	r26
 23c:	bf 93       	push	r27
 23e:	ef 93       	push	r30
 240:	ff 93       	push	r31
	// this code doesn't support multiple pressed switches
	uint8_t read = PINB;							// read port B
 242:	83 b1       	in	r24, 0x03	; 3
	read &= (1 << PINB0 | 1 << PINB1 | 1 << PINB2); // masking the read value
	switch (read)
 244:	87 70       	andi	r24, 0x07	; 7
 246:	82 30       	cpi	r24, 0x02	; 2
 248:	b9 f0       	breq	.+46     	; 0x278 <__vector_3+0x58>
 24a:	84 30       	cpi	r24, 0x04	; 4
 24c:	49 f1       	breq	.+82     	; 0x2a0 <__vector_3+0x80>
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	d1 f5       	brne	.+116    	; 0x2c6 <__vector_3+0xa6>
	{
		case 1: // first switch pressed
			LCD_CmdWrite(_LCD_CLR);
 252:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_CmdWrite>
			lcd_write_string("01");
 256:	86 e0       	ldi	r24, 0x06	; 6
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_write_string>
 25e:	2f e9       	ldi	r18, 0x9F	; 159
 260:	86 e8       	ldi	r24, 0x86	; 134
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	21 50       	subi	r18, 0x01	; 1
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <__vector_3+0x44>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <__vector_3+0x4e>
 26e:	00 00       	nop
			_delay_ms(500);
			LCD_CmdWrite(_LCD_CLR);
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_CmdWrite>
			break;
 276:	27 c0       	rjmp	.+78     	; 0x2c6 <__vector_3+0xa6>
		case 2: // second switch pressed
			LCD_CmdWrite(_LCD_CLR);
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_CmdWrite>
			lcd_write_string("02");
 27e:	89 e0       	ldi	r24, 0x09	; 9
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_write_string>
 286:	2f e9       	ldi	r18, 0x9F	; 159
 288:	86 e8       	ldi	r24, 0x86	; 134
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	80 40       	sbci	r24, 0x00	; 0
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <__vector_3+0x6c>
 294:	00 c0       	rjmp	.+0      	; 0x296 <__vector_3+0x76>
 296:	00 00       	nop
			_delay_ms(500);
			LCD_CmdWrite(_LCD_CLR);
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_CmdWrite>
			break;
 29e:	13 c0       	rjmp	.+38     	; 0x2c6 <__vector_3+0xa6>
		case 4: // third switch pressed
			LCD_CmdWrite(_LCD_CLR);
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_CmdWrite>
			lcd_write_string("03");
 2a6:	8c e0       	ldi	r24, 0x0C	; 12
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_write_string>
 2ae:	2f e9       	ldi	r18, 0x9F	; 159
 2b0:	86 e8       	ldi	r24, 0x86	; 134
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	21 50       	subi	r18, 0x01	; 1
 2b6:	80 40       	sbci	r24, 0x00	; 0
 2b8:	90 40       	sbci	r25, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <__vector_3+0x94>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <__vector_3+0x9e>
 2be:	00 00       	nop
			_delay_ms(500);
			LCD_CmdWrite(_LCD_CLR);
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_CmdWrite>
			break;
		default:
			break;
	}
}
 2c6:	ff 91       	pop	r31
 2c8:	ef 91       	pop	r30
 2ca:	bf 91       	pop	r27
 2cc:	af 91       	pop	r26
 2ce:	9f 91       	pop	r25
 2d0:	8f 91       	pop	r24
 2d2:	7f 91       	pop	r23
 2d4:	6f 91       	pop	r22
 2d6:	5f 91       	pop	r21
 2d8:	4f 91       	pop	r20
 2da:	3f 91       	pop	r19
 2dc:	2f 91       	pop	r18
 2de:	0f 90       	pop	r0
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	0f 90       	pop	r0
 2e4:	1f 90       	pop	r1
 2e6:	18 95       	reti

000002e8 <__vector_21>:

ISR(ADC_vect)
{
 2e8:	1f 92       	push	r1
 2ea:	0f 92       	push	r0
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	0f 92       	push	r0
 2f0:	11 24       	eor	r1, r1
 2f2:	cf 92       	push	r12
 2f4:	df 92       	push	r13
 2f6:	ef 92       	push	r14
 2f8:	ff 92       	push	r15
 2fa:	2f 93       	push	r18
 2fc:	3f 93       	push	r19
 2fe:	4f 93       	push	r20
 300:	5f 93       	push	r21
 302:	6f 93       	push	r22
 304:	7f 93       	push	r23
 306:	8f 93       	push	r24
 308:	9f 93       	push	r25
 30a:	af 93       	push	r26
 30c:	bf 93       	push	r27
 30e:	ef 93       	push	r30
 310:	ff 93       	push	r31
	sei(); // set global interrupt to enable interrupt nesting
 312:	78 94       	sei
	uint16_t adcValue = ADCW;
 314:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 318:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	float vin = (float)adcValue * 5 / 1024; // Vin = ADC * Vref / (2^n) ==> Vin = ADC * 5 / 1024 // the result will be in volt
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__floatunsisf>
 324:	20 e0       	ldi	r18, 0x00	; 0
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	40 ea       	ldi	r20, 0xA0	; 160
 32a:	50 e4       	ldi	r21, 0x40	; 64
 32c:	0e 94 0c 03 	call	0x618	; 0x618 <__mulsf3>
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	40 e8       	ldi	r20, 0x80	; 128
 336:	5a e3       	ldi	r21, 0x3A	; 58
 338:	0e 94 0c 03 	call	0x618	; 0x618 <__mulsf3>
 33c:	6b 01       	movw	r12, r22
 33e:	7c 01       	movw	r14, r24
	vin *= 1000;							// to convert it from volt to mv
	uint16_t temp = vin / 10;				// each 10 mv represent 1 Celsius degree
	LCD_CmdWrite(_LCD_CLR);					// clear the LCD
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_CmdWrite>
	lcd_write_string("temp = ");
 346:	8f e0       	ldi	r24, 0x0F	; 15
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_write_string>
	lcd_write_int(temp);
 34e:	20 e0       	ldi	r18, 0x00	; 0
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	4a e7       	ldi	r20, 0x7A	; 122
 354:	54 e4       	ldi	r21, 0x44	; 68
 356:	c7 01       	movw	r24, r14
 358:	b6 01       	movw	r22, r12
 35a:	0e 94 0c 03 	call	0x618	; 0x618 <__mulsf3>
 35e:	20 e0       	ldi	r18, 0x00	; 0
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	40 e2       	ldi	r20, 0x20	; 32
 364:	51 e4       	ldi	r21, 0x41	; 65
 366:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__divsf3>
 36a:	0e 94 4f 02 	call	0x49e	; 0x49e <__fixunssfsi>
 36e:	cb 01       	movw	r24, r22
 370:	0e 94 c3 00 	call	0x186	; 0x186 <lcd_write_int>
 374:	2f e9       	ldi	r18, 0x9F	; 159
 376:	86 e8       	ldi	r24, 0x86	; 134
 378:	91 e0       	ldi	r25, 0x01	; 1
 37a:	21 50       	subi	r18, 0x01	; 1
 37c:	80 40       	sbci	r24, 0x00	; 0
 37e:	90 40       	sbci	r25, 0x00	; 0
 380:	e1 f7       	brne	.-8      	; 0x37a <__vector_21+0x92>
 382:	00 c0       	rjmp	.+0      	; 0x384 <__vector_21+0x9c>
 384:	00 00       	nop
	_delay_ms(500);
	ADCSRA |= (1 << ADSC); // start ADC next conversion
 386:	ea e7       	ldi	r30, 0x7A	; 122
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	80 64       	ori	r24, 0x40	; 64
 38e:	80 83       	st	Z, r24
}
 390:	ff 91       	pop	r31
 392:	ef 91       	pop	r30
 394:	bf 91       	pop	r27
 396:	af 91       	pop	r26
 398:	9f 91       	pop	r25
 39a:	8f 91       	pop	r24
 39c:	7f 91       	pop	r23
 39e:	6f 91       	pop	r22
 3a0:	5f 91       	pop	r21
 3a2:	4f 91       	pop	r20
 3a4:	3f 91       	pop	r19
 3a6:	2f 91       	pop	r18
 3a8:	ff 90       	pop	r15
 3aa:	ef 90       	pop	r14
 3ac:	df 90       	pop	r13
 3ae:	cf 90       	pop	r12
 3b0:	0f 90       	pop	r0
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	0f 90       	pop	r0
 3b6:	1f 90       	pop	r1
 3b8:	18 95       	reti

000003ba <__divsf3>:
 3ba:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__divsf3x>
 3be:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__fp_round>
 3c2:	0e 94 cb 02 	call	0x596	; 0x596 <__fp_pscB>
 3c6:	58 f0       	brcs	.+22     	; 0x3de <__divsf3+0x24>
 3c8:	0e 94 c4 02 	call	0x588	; 0x588 <__fp_pscA>
 3cc:	40 f0       	brcs	.+16     	; 0x3de <__divsf3+0x24>
 3ce:	29 f4       	brne	.+10     	; 0x3da <__divsf3+0x20>
 3d0:	5f 3f       	cpi	r21, 0xFF	; 255
 3d2:	29 f0       	breq	.+10     	; 0x3de <__divsf3+0x24>
 3d4:	0c 94 bb 02 	jmp	0x576	; 0x576 <__fp_inf>
 3d8:	51 11       	cpse	r21, r1
 3da:	0c 94 06 03 	jmp	0x60c	; 0x60c <__fp_szero>
 3de:	0c 94 c1 02 	jmp	0x582	; 0x582 <__fp_nan>

000003e2 <__divsf3x>:
 3e2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__fp_split3>
 3e6:	68 f3       	brcs	.-38     	; 0x3c2 <__divsf3+0x8>

000003e8 <__divsf3_pse>:
 3e8:	99 23       	and	r25, r25
 3ea:	b1 f3       	breq	.-20     	; 0x3d8 <__divsf3+0x1e>
 3ec:	55 23       	and	r21, r21
 3ee:	91 f3       	breq	.-28     	; 0x3d4 <__divsf3+0x1a>
 3f0:	95 1b       	sub	r25, r21
 3f2:	55 0b       	sbc	r21, r21
 3f4:	bb 27       	eor	r27, r27
 3f6:	aa 27       	eor	r26, r26
 3f8:	62 17       	cp	r22, r18
 3fa:	73 07       	cpc	r23, r19
 3fc:	84 07       	cpc	r24, r20
 3fe:	38 f0       	brcs	.+14     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 400:	9f 5f       	subi	r25, 0xFF	; 255
 402:	5f 4f       	sbci	r21, 0xFF	; 255
 404:	22 0f       	add	r18, r18
 406:	33 1f       	adc	r19, r19
 408:	44 1f       	adc	r20, r20
 40a:	aa 1f       	adc	r26, r26
 40c:	a9 f3       	breq	.-22     	; 0x3f8 <__divsf3_pse+0x10>
 40e:	35 d0       	rcall	.+106    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 410:	0e 2e       	mov	r0, r30
 412:	3a f0       	brmi	.+14     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 414:	e0 e8       	ldi	r30, 0x80	; 128
 416:	32 d0       	rcall	.+100    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 418:	91 50       	subi	r25, 0x01	; 1
 41a:	50 40       	sbci	r21, 0x00	; 0
 41c:	e6 95       	lsr	r30
 41e:	00 1c       	adc	r0, r0
 420:	ca f7       	brpl	.-14     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 422:	2b d0       	rcall	.+86     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 424:	fe 2f       	mov	r31, r30
 426:	29 d0       	rcall	.+82     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 428:	66 0f       	add	r22, r22
 42a:	77 1f       	adc	r23, r23
 42c:	88 1f       	adc	r24, r24
 42e:	bb 1f       	adc	r27, r27
 430:	26 17       	cp	r18, r22
 432:	37 07       	cpc	r19, r23
 434:	48 07       	cpc	r20, r24
 436:	ab 07       	cpc	r26, r27
 438:	b0 e8       	ldi	r27, 0x80	; 128
 43a:	09 f0       	breq	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43c:	bb 0b       	sbc	r27, r27
 43e:	80 2d       	mov	r24, r0
 440:	bf 01       	movw	r22, r30
 442:	ff 27       	eor	r31, r31
 444:	93 58       	subi	r25, 0x83	; 131
 446:	5f 4f       	sbci	r21, 0xFF	; 255
 448:	3a f0       	brmi	.+14     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 44a:	9e 3f       	cpi	r25, 0xFE	; 254
 44c:	51 05       	cpc	r21, r1
 44e:	78 f0       	brcs	.+30     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 450:	0c 94 bb 02 	jmp	0x576	; 0x576 <__fp_inf>
 454:	0c 94 06 03 	jmp	0x60c	; 0x60c <__fp_szero>
 458:	5f 3f       	cpi	r21, 0xFF	; 255
 45a:	e4 f3       	brlt	.-8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 45c:	98 3e       	cpi	r25, 0xE8	; 232
 45e:	d4 f3       	brlt	.-12     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 460:	86 95       	lsr	r24
 462:	77 95       	ror	r23
 464:	67 95       	ror	r22
 466:	b7 95       	ror	r27
 468:	f7 95       	ror	r31
 46a:	9f 5f       	subi	r25, 0xFF	; 255
 46c:	c9 f7       	brne	.-14     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 46e:	88 0f       	add	r24, r24
 470:	91 1d       	adc	r25, r1
 472:	96 95       	lsr	r25
 474:	87 95       	ror	r24
 476:	97 f9       	bld	r25, 7
 478:	08 95       	ret
 47a:	e1 e0       	ldi	r30, 0x01	; 1
 47c:	66 0f       	add	r22, r22
 47e:	77 1f       	adc	r23, r23
 480:	88 1f       	adc	r24, r24
 482:	bb 1f       	adc	r27, r27
 484:	62 17       	cp	r22, r18
 486:	73 07       	cpc	r23, r19
 488:	84 07       	cpc	r24, r20
 48a:	ba 07       	cpc	r27, r26
 48c:	20 f0       	brcs	.+8      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 48e:	62 1b       	sub	r22, r18
 490:	73 0b       	sbc	r23, r19
 492:	84 0b       	sbc	r24, r20
 494:	ba 0b       	sbc	r27, r26
 496:	ee 1f       	adc	r30, r30
 498:	88 f7       	brcc	.-30     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 49a:	e0 95       	com	r30
 49c:	08 95       	ret

0000049e <__fixunssfsi>:
 49e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__fp_splitA>
 4a2:	88 f0       	brcs	.+34     	; 0x4c6 <__fixunssfsi+0x28>
 4a4:	9f 57       	subi	r25, 0x7F	; 127
 4a6:	98 f0       	brcs	.+38     	; 0x4ce <__fixunssfsi+0x30>
 4a8:	b9 2f       	mov	r27, r25
 4aa:	99 27       	eor	r25, r25
 4ac:	b7 51       	subi	r27, 0x17	; 23
 4ae:	b0 f0       	brcs	.+44     	; 0x4dc <__fixunssfsi+0x3e>
 4b0:	e1 f0       	breq	.+56     	; 0x4ea <__fixunssfsi+0x4c>
 4b2:	66 0f       	add	r22, r22
 4b4:	77 1f       	adc	r23, r23
 4b6:	88 1f       	adc	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	1a f0       	brmi	.+6      	; 0x4c2 <__fixunssfsi+0x24>
 4bc:	ba 95       	dec	r27
 4be:	c9 f7       	brne	.-14     	; 0x4b2 <__fixunssfsi+0x14>
 4c0:	14 c0       	rjmp	.+40     	; 0x4ea <__fixunssfsi+0x4c>
 4c2:	b1 30       	cpi	r27, 0x01	; 1
 4c4:	91 f0       	breq	.+36     	; 0x4ea <__fixunssfsi+0x4c>
 4c6:	0e 94 05 03 	call	0x60a	; 0x60a <__fp_zero>
 4ca:	b1 e0       	ldi	r27, 0x01	; 1
 4cc:	08 95       	ret
 4ce:	0c 94 05 03 	jmp	0x60a	; 0x60a <__fp_zero>
 4d2:	67 2f       	mov	r22, r23
 4d4:	78 2f       	mov	r23, r24
 4d6:	88 27       	eor	r24, r24
 4d8:	b8 5f       	subi	r27, 0xF8	; 248
 4da:	39 f0       	breq	.+14     	; 0x4ea <__fixunssfsi+0x4c>
 4dc:	b9 3f       	cpi	r27, 0xF9	; 249
 4de:	cc f3       	brlt	.-14     	; 0x4d2 <__fixunssfsi+0x34>
 4e0:	86 95       	lsr	r24
 4e2:	77 95       	ror	r23
 4e4:	67 95       	ror	r22
 4e6:	b3 95       	inc	r27
 4e8:	d9 f7       	brne	.-10     	; 0x4e0 <__fixunssfsi+0x42>
 4ea:	3e f4       	brtc	.+14     	; 0x4fa <__fixunssfsi+0x5c>
 4ec:	90 95       	com	r25
 4ee:	80 95       	com	r24
 4f0:	70 95       	com	r23
 4f2:	61 95       	neg	r22
 4f4:	7f 4f       	sbci	r23, 0xFF	; 255
 4f6:	8f 4f       	sbci	r24, 0xFF	; 255
 4f8:	9f 4f       	sbci	r25, 0xFF	; 255
 4fa:	08 95       	ret

000004fc <__floatunsisf>:
 4fc:	e8 94       	clt
 4fe:	09 c0       	rjmp	.+18     	; 0x512 <__floatsisf+0x12>

00000500 <__floatsisf>:
 500:	97 fb       	bst	r25, 7
 502:	3e f4       	brtc	.+14     	; 0x512 <__floatsisf+0x12>
 504:	90 95       	com	r25
 506:	80 95       	com	r24
 508:	70 95       	com	r23
 50a:	61 95       	neg	r22
 50c:	7f 4f       	sbci	r23, 0xFF	; 255
 50e:	8f 4f       	sbci	r24, 0xFF	; 255
 510:	9f 4f       	sbci	r25, 0xFF	; 255
 512:	99 23       	and	r25, r25
 514:	a9 f0       	breq	.+42     	; 0x540 <__floatsisf+0x40>
 516:	f9 2f       	mov	r31, r25
 518:	96 e9       	ldi	r25, 0x96	; 150
 51a:	bb 27       	eor	r27, r27
 51c:	93 95       	inc	r25
 51e:	f6 95       	lsr	r31
 520:	87 95       	ror	r24
 522:	77 95       	ror	r23
 524:	67 95       	ror	r22
 526:	b7 95       	ror	r27
 528:	f1 11       	cpse	r31, r1
 52a:	f8 cf       	rjmp	.-16     	; 0x51c <__floatsisf+0x1c>
 52c:	fa f4       	brpl	.+62     	; 0x56c <__floatsisf+0x6c>
 52e:	bb 0f       	add	r27, r27
 530:	11 f4       	brne	.+4      	; 0x536 <__floatsisf+0x36>
 532:	60 ff       	sbrs	r22, 0
 534:	1b c0       	rjmp	.+54     	; 0x56c <__floatsisf+0x6c>
 536:	6f 5f       	subi	r22, 0xFF	; 255
 538:	7f 4f       	sbci	r23, 0xFF	; 255
 53a:	8f 4f       	sbci	r24, 0xFF	; 255
 53c:	9f 4f       	sbci	r25, 0xFF	; 255
 53e:	16 c0       	rjmp	.+44     	; 0x56c <__floatsisf+0x6c>
 540:	88 23       	and	r24, r24
 542:	11 f0       	breq	.+4      	; 0x548 <__floatsisf+0x48>
 544:	96 e9       	ldi	r25, 0x96	; 150
 546:	11 c0       	rjmp	.+34     	; 0x56a <__floatsisf+0x6a>
 548:	77 23       	and	r23, r23
 54a:	21 f0       	breq	.+8      	; 0x554 <__floatsisf+0x54>
 54c:	9e e8       	ldi	r25, 0x8E	; 142
 54e:	87 2f       	mov	r24, r23
 550:	76 2f       	mov	r23, r22
 552:	05 c0       	rjmp	.+10     	; 0x55e <__floatsisf+0x5e>
 554:	66 23       	and	r22, r22
 556:	71 f0       	breq	.+28     	; 0x574 <__floatsisf+0x74>
 558:	96 e8       	ldi	r25, 0x86	; 134
 55a:	86 2f       	mov	r24, r22
 55c:	70 e0       	ldi	r23, 0x00	; 0
 55e:	60 e0       	ldi	r22, 0x00	; 0
 560:	2a f0       	brmi	.+10     	; 0x56c <__floatsisf+0x6c>
 562:	9a 95       	dec	r25
 564:	66 0f       	add	r22, r22
 566:	77 1f       	adc	r23, r23
 568:	88 1f       	adc	r24, r24
 56a:	da f7       	brpl	.-10     	; 0x562 <__floatsisf+0x62>
 56c:	88 0f       	add	r24, r24
 56e:	96 95       	lsr	r25
 570:	87 95       	ror	r24
 572:	97 f9       	bld	r25, 7
 574:	08 95       	ret

00000576 <__fp_inf>:
 576:	97 f9       	bld	r25, 7
 578:	9f 67       	ori	r25, 0x7F	; 127
 57a:	80 e8       	ldi	r24, 0x80	; 128
 57c:	70 e0       	ldi	r23, 0x00	; 0
 57e:	60 e0       	ldi	r22, 0x00	; 0
 580:	08 95       	ret

00000582 <__fp_nan>:
 582:	9f ef       	ldi	r25, 0xFF	; 255
 584:	80 ec       	ldi	r24, 0xC0	; 192
 586:	08 95       	ret

00000588 <__fp_pscA>:
 588:	00 24       	eor	r0, r0
 58a:	0a 94       	dec	r0
 58c:	16 16       	cp	r1, r22
 58e:	17 06       	cpc	r1, r23
 590:	18 06       	cpc	r1, r24
 592:	09 06       	cpc	r0, r25
 594:	08 95       	ret

00000596 <__fp_pscB>:
 596:	00 24       	eor	r0, r0
 598:	0a 94       	dec	r0
 59a:	12 16       	cp	r1, r18
 59c:	13 06       	cpc	r1, r19
 59e:	14 06       	cpc	r1, r20
 5a0:	05 06       	cpc	r0, r21
 5a2:	08 95       	ret

000005a4 <__fp_round>:
 5a4:	09 2e       	mov	r0, r25
 5a6:	03 94       	inc	r0
 5a8:	00 0c       	add	r0, r0
 5aa:	11 f4       	brne	.+4      	; 0x5b0 <__fp_round+0xc>
 5ac:	88 23       	and	r24, r24
 5ae:	52 f0       	brmi	.+20     	; 0x5c4 <__fp_round+0x20>
 5b0:	bb 0f       	add	r27, r27
 5b2:	40 f4       	brcc	.+16     	; 0x5c4 <__fp_round+0x20>
 5b4:	bf 2b       	or	r27, r31
 5b6:	11 f4       	brne	.+4      	; 0x5bc <__fp_round+0x18>
 5b8:	60 ff       	sbrs	r22, 0
 5ba:	04 c0       	rjmp	.+8      	; 0x5c4 <__fp_round+0x20>
 5bc:	6f 5f       	subi	r22, 0xFF	; 255
 5be:	7f 4f       	sbci	r23, 0xFF	; 255
 5c0:	8f 4f       	sbci	r24, 0xFF	; 255
 5c2:	9f 4f       	sbci	r25, 0xFF	; 255
 5c4:	08 95       	ret

000005c6 <__fp_split3>:
 5c6:	57 fd       	sbrc	r21, 7
 5c8:	90 58       	subi	r25, 0x80	; 128
 5ca:	44 0f       	add	r20, r20
 5cc:	55 1f       	adc	r21, r21
 5ce:	59 f0       	breq	.+22     	; 0x5e6 <__fp_splitA+0x10>
 5d0:	5f 3f       	cpi	r21, 0xFF	; 255
 5d2:	71 f0       	breq	.+28     	; 0x5f0 <__fp_splitA+0x1a>
 5d4:	47 95       	ror	r20

000005d6 <__fp_splitA>:
 5d6:	88 0f       	add	r24, r24
 5d8:	97 fb       	bst	r25, 7
 5da:	99 1f       	adc	r25, r25
 5dc:	61 f0       	breq	.+24     	; 0x5f6 <__fp_splitA+0x20>
 5de:	9f 3f       	cpi	r25, 0xFF	; 255
 5e0:	79 f0       	breq	.+30     	; 0x600 <__fp_splitA+0x2a>
 5e2:	87 95       	ror	r24
 5e4:	08 95       	ret
 5e6:	12 16       	cp	r1, r18
 5e8:	13 06       	cpc	r1, r19
 5ea:	14 06       	cpc	r1, r20
 5ec:	55 1f       	adc	r21, r21
 5ee:	f2 cf       	rjmp	.-28     	; 0x5d4 <__fp_split3+0xe>
 5f0:	46 95       	lsr	r20
 5f2:	f1 df       	rcall	.-30     	; 0x5d6 <__fp_splitA>
 5f4:	08 c0       	rjmp	.+16     	; 0x606 <__fp_splitA+0x30>
 5f6:	16 16       	cp	r1, r22
 5f8:	17 06       	cpc	r1, r23
 5fa:	18 06       	cpc	r1, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	f1 cf       	rjmp	.-30     	; 0x5e2 <__fp_splitA+0xc>
 600:	86 95       	lsr	r24
 602:	71 05       	cpc	r23, r1
 604:	61 05       	cpc	r22, r1
 606:	08 94       	sec
 608:	08 95       	ret

0000060a <__fp_zero>:
 60a:	e8 94       	clt

0000060c <__fp_szero>:
 60c:	bb 27       	eor	r27, r27
 60e:	66 27       	eor	r22, r22
 610:	77 27       	eor	r23, r23
 612:	cb 01       	movw	r24, r22
 614:	97 f9       	bld	r25, 7
 616:	08 95       	ret

00000618 <__mulsf3>:
 618:	0e 94 1f 03 	call	0x63e	; 0x63e <__mulsf3x>
 61c:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__fp_round>
 620:	0e 94 c4 02 	call	0x588	; 0x588 <__fp_pscA>
 624:	38 f0       	brcs	.+14     	; 0x634 <__mulsf3+0x1c>
 626:	0e 94 cb 02 	call	0x596	; 0x596 <__fp_pscB>
 62a:	20 f0       	brcs	.+8      	; 0x634 <__mulsf3+0x1c>
 62c:	95 23       	and	r25, r21
 62e:	11 f0       	breq	.+4      	; 0x634 <__mulsf3+0x1c>
 630:	0c 94 bb 02 	jmp	0x576	; 0x576 <__fp_inf>
 634:	0c 94 c1 02 	jmp	0x582	; 0x582 <__fp_nan>
 638:	11 24       	eor	r1, r1
 63a:	0c 94 06 03 	jmp	0x60c	; 0x60c <__fp_szero>

0000063e <__mulsf3x>:
 63e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__fp_split3>
 642:	70 f3       	brcs	.-36     	; 0x620 <__mulsf3+0x8>

00000644 <__mulsf3_pse>:
 644:	95 9f       	mul	r25, r21
 646:	c1 f3       	breq	.-16     	; 0x638 <__mulsf3+0x20>
 648:	95 0f       	add	r25, r21
 64a:	50 e0       	ldi	r21, 0x00	; 0
 64c:	55 1f       	adc	r21, r21
 64e:	62 9f       	mul	r22, r18
 650:	f0 01       	movw	r30, r0
 652:	72 9f       	mul	r23, r18
 654:	bb 27       	eor	r27, r27
 656:	f0 0d       	add	r31, r0
 658:	b1 1d       	adc	r27, r1
 65a:	63 9f       	mul	r22, r19
 65c:	aa 27       	eor	r26, r26
 65e:	f0 0d       	add	r31, r0
 660:	b1 1d       	adc	r27, r1
 662:	aa 1f       	adc	r26, r26
 664:	64 9f       	mul	r22, r20
 666:	66 27       	eor	r22, r22
 668:	b0 0d       	add	r27, r0
 66a:	a1 1d       	adc	r26, r1
 66c:	66 1f       	adc	r22, r22
 66e:	82 9f       	mul	r24, r18
 670:	22 27       	eor	r18, r18
 672:	b0 0d       	add	r27, r0
 674:	a1 1d       	adc	r26, r1
 676:	62 1f       	adc	r22, r18
 678:	73 9f       	mul	r23, r19
 67a:	b0 0d       	add	r27, r0
 67c:	a1 1d       	adc	r26, r1
 67e:	62 1f       	adc	r22, r18
 680:	83 9f       	mul	r24, r19
 682:	a0 0d       	add	r26, r0
 684:	61 1d       	adc	r22, r1
 686:	22 1f       	adc	r18, r18
 688:	74 9f       	mul	r23, r20
 68a:	33 27       	eor	r19, r19
 68c:	a0 0d       	add	r26, r0
 68e:	61 1d       	adc	r22, r1
 690:	23 1f       	adc	r18, r19
 692:	84 9f       	mul	r24, r20
 694:	60 0d       	add	r22, r0
 696:	21 1d       	adc	r18, r1
 698:	82 2f       	mov	r24, r18
 69a:	76 2f       	mov	r23, r22
 69c:	6a 2f       	mov	r22, r26
 69e:	11 24       	eor	r1, r1
 6a0:	9f 57       	subi	r25, 0x7F	; 127
 6a2:	50 40       	sbci	r21, 0x00	; 0
 6a4:	9a f0       	brmi	.+38     	; 0x6cc <__mulsf3_pse+0x88>
 6a6:	f1 f0       	breq	.+60     	; 0x6e4 <__mulsf3_pse+0xa0>
 6a8:	88 23       	and	r24, r24
 6aa:	4a f0       	brmi	.+18     	; 0x6be <__mulsf3_pse+0x7a>
 6ac:	ee 0f       	add	r30, r30
 6ae:	ff 1f       	adc	r31, r31
 6b0:	bb 1f       	adc	r27, r27
 6b2:	66 1f       	adc	r22, r22
 6b4:	77 1f       	adc	r23, r23
 6b6:	88 1f       	adc	r24, r24
 6b8:	91 50       	subi	r25, 0x01	; 1
 6ba:	50 40       	sbci	r21, 0x00	; 0
 6bc:	a9 f7       	brne	.-22     	; 0x6a8 <__mulsf3_pse+0x64>
 6be:	9e 3f       	cpi	r25, 0xFE	; 254
 6c0:	51 05       	cpc	r21, r1
 6c2:	80 f0       	brcs	.+32     	; 0x6e4 <__mulsf3_pse+0xa0>
 6c4:	0c 94 bb 02 	jmp	0x576	; 0x576 <__fp_inf>
 6c8:	0c 94 06 03 	jmp	0x60c	; 0x60c <__fp_szero>
 6cc:	5f 3f       	cpi	r21, 0xFF	; 255
 6ce:	e4 f3       	brlt	.-8      	; 0x6c8 <__mulsf3_pse+0x84>
 6d0:	98 3e       	cpi	r25, 0xE8	; 232
 6d2:	d4 f3       	brlt	.-12     	; 0x6c8 <__mulsf3_pse+0x84>
 6d4:	86 95       	lsr	r24
 6d6:	77 95       	ror	r23
 6d8:	67 95       	ror	r22
 6da:	b7 95       	ror	r27
 6dc:	f7 95       	ror	r31
 6de:	e7 95       	ror	r30
 6e0:	9f 5f       	subi	r25, 0xFF	; 255
 6e2:	c1 f7       	brne	.-16     	; 0x6d4 <__mulsf3_pse+0x90>
 6e4:	fe 2b       	or	r31, r30
 6e6:	88 0f       	add	r24, r24
 6e8:	91 1d       	adc	r25, r1
 6ea:	96 95       	lsr	r25
 6ec:	87 95       	ror	r24
 6ee:	97 f9       	bld	r25, 7
 6f0:	08 95       	ret

000006f2 <sprintf>:
 6f2:	ae e0       	ldi	r26, 0x0E	; 14
 6f4:	b0 e0       	ldi	r27, 0x00	; 0
 6f6:	ef e7       	ldi	r30, 0x7F	; 127
 6f8:	f3 e0       	ldi	r31, 0x03	; 3
 6fa:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__prologue_saves__+0x1c>
 6fe:	0d 89       	ldd	r16, Y+21	; 0x15
 700:	1e 89       	ldd	r17, Y+22	; 0x16
 702:	86 e0       	ldi	r24, 0x06	; 6
 704:	8c 83       	std	Y+4, r24	; 0x04
 706:	1a 83       	std	Y+2, r17	; 0x02
 708:	09 83       	std	Y+1, r16	; 0x01
 70a:	8f ef       	ldi	r24, 0xFF	; 255
 70c:	9f e7       	ldi	r25, 0x7F	; 127
 70e:	9e 83       	std	Y+6, r25	; 0x06
 710:	8d 83       	std	Y+5, r24	; 0x05
 712:	ae 01       	movw	r20, r28
 714:	47 5e       	subi	r20, 0xE7	; 231
 716:	5f 4f       	sbci	r21, 0xFF	; 255
 718:	6f 89       	ldd	r22, Y+23	; 0x17
 71a:	78 8d       	ldd	r23, Y+24	; 0x18
 71c:	ce 01       	movw	r24, r28
 71e:	01 96       	adiw	r24, 0x01	; 1
 720:	0e 94 9b 03 	call	0x736	; 0x736 <vfprintf>
 724:	ef 81       	ldd	r30, Y+7	; 0x07
 726:	f8 85       	ldd	r31, Y+8	; 0x08
 728:	e0 0f       	add	r30, r16
 72a:	f1 1f       	adc	r31, r17
 72c:	10 82       	st	Z, r1
 72e:	2e 96       	adiw	r28, 0x0e	; 14
 730:	e4 e0       	ldi	r30, 0x04	; 4
 732:	0c 94 56 06 	jmp	0xcac	; 0xcac <__epilogue_restores__+0x1c>

00000736 <vfprintf>:
 736:	ab e0       	ldi	r26, 0x0B	; 11
 738:	b0 e0       	ldi	r27, 0x00	; 0
 73a:	e1 ea       	ldi	r30, 0xA1	; 161
 73c:	f3 e0       	ldi	r31, 0x03	; 3
 73e:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__prologue_saves__>
 742:	6c 01       	movw	r12, r24
 744:	7b 01       	movw	r14, r22
 746:	8a 01       	movw	r16, r20
 748:	fc 01       	movw	r30, r24
 74a:	17 82       	std	Z+7, r1	; 0x07
 74c:	16 82       	std	Z+6, r1	; 0x06
 74e:	83 81       	ldd	r24, Z+3	; 0x03
 750:	81 ff       	sbrs	r24, 1
 752:	cc c1       	rjmp	.+920    	; 0xaec <__stack+0x1ed>
 754:	ce 01       	movw	r24, r28
 756:	01 96       	adiw	r24, 0x01	; 1
 758:	3c 01       	movw	r6, r24
 75a:	f6 01       	movw	r30, r12
 75c:	93 81       	ldd	r25, Z+3	; 0x03
 75e:	f7 01       	movw	r30, r14
 760:	93 fd       	sbrc	r25, 3
 762:	85 91       	lpm	r24, Z+
 764:	93 ff       	sbrs	r25, 3
 766:	81 91       	ld	r24, Z+
 768:	7f 01       	movw	r14, r30
 76a:	88 23       	and	r24, r24
 76c:	09 f4       	brne	.+2      	; 0x770 <vfprintf+0x3a>
 76e:	ba c1       	rjmp	.+884    	; 0xae4 <__stack+0x1e5>
 770:	85 32       	cpi	r24, 0x25	; 37
 772:	39 f4       	brne	.+14     	; 0x782 <vfprintf+0x4c>
 774:	93 fd       	sbrc	r25, 3
 776:	85 91       	lpm	r24, Z+
 778:	93 ff       	sbrs	r25, 3
 77a:	81 91       	ld	r24, Z+
 77c:	7f 01       	movw	r14, r30
 77e:	85 32       	cpi	r24, 0x25	; 37
 780:	29 f4       	brne	.+10     	; 0x78c <vfprintf+0x56>
 782:	b6 01       	movw	r22, r12
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	0e 94 92 05 	call	0xb24	; 0xb24 <fputc>
 78a:	e7 cf       	rjmp	.-50     	; 0x75a <vfprintf+0x24>
 78c:	91 2c       	mov	r9, r1
 78e:	21 2c       	mov	r2, r1
 790:	31 2c       	mov	r3, r1
 792:	ff e1       	ldi	r31, 0x1F	; 31
 794:	f3 15       	cp	r31, r3
 796:	d8 f0       	brcs	.+54     	; 0x7ce <vfprintf+0x98>
 798:	8b 32       	cpi	r24, 0x2B	; 43
 79a:	79 f0       	breq	.+30     	; 0x7ba <vfprintf+0x84>
 79c:	38 f4       	brcc	.+14     	; 0x7ac <vfprintf+0x76>
 79e:	80 32       	cpi	r24, 0x20	; 32
 7a0:	79 f0       	breq	.+30     	; 0x7c0 <vfprintf+0x8a>
 7a2:	83 32       	cpi	r24, 0x23	; 35
 7a4:	a1 f4       	brne	.+40     	; 0x7ce <vfprintf+0x98>
 7a6:	23 2d       	mov	r18, r3
 7a8:	20 61       	ori	r18, 0x10	; 16
 7aa:	1d c0       	rjmp	.+58     	; 0x7e6 <vfprintf+0xb0>
 7ac:	8d 32       	cpi	r24, 0x2D	; 45
 7ae:	61 f0       	breq	.+24     	; 0x7c8 <vfprintf+0x92>
 7b0:	80 33       	cpi	r24, 0x30	; 48
 7b2:	69 f4       	brne	.+26     	; 0x7ce <vfprintf+0x98>
 7b4:	23 2d       	mov	r18, r3
 7b6:	21 60       	ori	r18, 0x01	; 1
 7b8:	16 c0       	rjmp	.+44     	; 0x7e6 <vfprintf+0xb0>
 7ba:	83 2d       	mov	r24, r3
 7bc:	82 60       	ori	r24, 0x02	; 2
 7be:	38 2e       	mov	r3, r24
 7c0:	e3 2d       	mov	r30, r3
 7c2:	e4 60       	ori	r30, 0x04	; 4
 7c4:	3e 2e       	mov	r3, r30
 7c6:	2a c0       	rjmp	.+84     	; 0x81c <vfprintf+0xe6>
 7c8:	f3 2d       	mov	r31, r3
 7ca:	f8 60       	ori	r31, 0x08	; 8
 7cc:	1d c0       	rjmp	.+58     	; 0x808 <vfprintf+0xd2>
 7ce:	37 fc       	sbrc	r3, 7
 7d0:	2d c0       	rjmp	.+90     	; 0x82c <vfprintf+0xf6>
 7d2:	20 ed       	ldi	r18, 0xD0	; 208
 7d4:	28 0f       	add	r18, r24
 7d6:	2a 30       	cpi	r18, 0x0A	; 10
 7d8:	40 f0       	brcs	.+16     	; 0x7ea <vfprintf+0xb4>
 7da:	8e 32       	cpi	r24, 0x2E	; 46
 7dc:	b9 f4       	brne	.+46     	; 0x80c <vfprintf+0xd6>
 7de:	36 fc       	sbrc	r3, 6
 7e0:	81 c1       	rjmp	.+770    	; 0xae4 <__stack+0x1e5>
 7e2:	23 2d       	mov	r18, r3
 7e4:	20 64       	ori	r18, 0x40	; 64
 7e6:	32 2e       	mov	r3, r18
 7e8:	19 c0       	rjmp	.+50     	; 0x81c <vfprintf+0xe6>
 7ea:	36 fe       	sbrs	r3, 6
 7ec:	06 c0       	rjmp	.+12     	; 0x7fa <vfprintf+0xc4>
 7ee:	8a e0       	ldi	r24, 0x0A	; 10
 7f0:	98 9e       	mul	r9, r24
 7f2:	20 0d       	add	r18, r0
 7f4:	11 24       	eor	r1, r1
 7f6:	92 2e       	mov	r9, r18
 7f8:	11 c0       	rjmp	.+34     	; 0x81c <vfprintf+0xe6>
 7fa:	ea e0       	ldi	r30, 0x0A	; 10
 7fc:	2e 9e       	mul	r2, r30
 7fe:	20 0d       	add	r18, r0
 800:	11 24       	eor	r1, r1
 802:	22 2e       	mov	r2, r18
 804:	f3 2d       	mov	r31, r3
 806:	f0 62       	ori	r31, 0x20	; 32
 808:	3f 2e       	mov	r3, r31
 80a:	08 c0       	rjmp	.+16     	; 0x81c <vfprintf+0xe6>
 80c:	8c 36       	cpi	r24, 0x6C	; 108
 80e:	21 f4       	brne	.+8      	; 0x818 <vfprintf+0xe2>
 810:	83 2d       	mov	r24, r3
 812:	80 68       	ori	r24, 0x80	; 128
 814:	38 2e       	mov	r3, r24
 816:	02 c0       	rjmp	.+4      	; 0x81c <vfprintf+0xe6>
 818:	88 36       	cpi	r24, 0x68	; 104
 81a:	41 f4       	brne	.+16     	; 0x82c <vfprintf+0xf6>
 81c:	f7 01       	movw	r30, r14
 81e:	93 fd       	sbrc	r25, 3
 820:	85 91       	lpm	r24, Z+
 822:	93 ff       	sbrs	r25, 3
 824:	81 91       	ld	r24, Z+
 826:	7f 01       	movw	r14, r30
 828:	81 11       	cpse	r24, r1
 82a:	b3 cf       	rjmp	.-154    	; 0x792 <vfprintf+0x5c>
 82c:	98 2f       	mov	r25, r24
 82e:	9f 7d       	andi	r25, 0xDF	; 223
 830:	95 54       	subi	r25, 0x45	; 69
 832:	93 30       	cpi	r25, 0x03	; 3
 834:	28 f4       	brcc	.+10     	; 0x840 <vfprintf+0x10a>
 836:	0c 5f       	subi	r16, 0xFC	; 252
 838:	1f 4f       	sbci	r17, 0xFF	; 255
 83a:	9f e3       	ldi	r25, 0x3F	; 63
 83c:	99 83       	std	Y+1, r25	; 0x01
 83e:	0d c0       	rjmp	.+26     	; 0x85a <vfprintf+0x124>
 840:	83 36       	cpi	r24, 0x63	; 99
 842:	31 f0       	breq	.+12     	; 0x850 <vfprintf+0x11a>
 844:	83 37       	cpi	r24, 0x73	; 115
 846:	71 f0       	breq	.+28     	; 0x864 <vfprintf+0x12e>
 848:	83 35       	cpi	r24, 0x53	; 83
 84a:	09 f0       	breq	.+2      	; 0x84e <vfprintf+0x118>
 84c:	59 c0       	rjmp	.+178    	; 0x900 <__stack+0x1>
 84e:	21 c0       	rjmp	.+66     	; 0x892 <vfprintf+0x15c>
 850:	f8 01       	movw	r30, r16
 852:	80 81       	ld	r24, Z
 854:	89 83       	std	Y+1, r24	; 0x01
 856:	0e 5f       	subi	r16, 0xFE	; 254
 858:	1f 4f       	sbci	r17, 0xFF	; 255
 85a:	88 24       	eor	r8, r8
 85c:	83 94       	inc	r8
 85e:	91 2c       	mov	r9, r1
 860:	53 01       	movw	r10, r6
 862:	13 c0       	rjmp	.+38     	; 0x88a <vfprintf+0x154>
 864:	28 01       	movw	r4, r16
 866:	f2 e0       	ldi	r31, 0x02	; 2
 868:	4f 0e       	add	r4, r31
 86a:	51 1c       	adc	r5, r1
 86c:	f8 01       	movw	r30, r16
 86e:	a0 80       	ld	r10, Z
 870:	b1 80       	ldd	r11, Z+1	; 0x01
 872:	36 fe       	sbrs	r3, 6
 874:	03 c0       	rjmp	.+6      	; 0x87c <vfprintf+0x146>
 876:	69 2d       	mov	r22, r9
 878:	70 e0       	ldi	r23, 0x00	; 0
 87a:	02 c0       	rjmp	.+4      	; 0x880 <vfprintf+0x14a>
 87c:	6f ef       	ldi	r22, 0xFF	; 255
 87e:	7f ef       	ldi	r23, 0xFF	; 255
 880:	c5 01       	movw	r24, r10
 882:	0e 94 87 05 	call	0xb0e	; 0xb0e <strnlen>
 886:	4c 01       	movw	r8, r24
 888:	82 01       	movw	r16, r4
 88a:	f3 2d       	mov	r31, r3
 88c:	ff 77       	andi	r31, 0x7F	; 127
 88e:	3f 2e       	mov	r3, r31
 890:	16 c0       	rjmp	.+44     	; 0x8be <vfprintf+0x188>
 892:	28 01       	movw	r4, r16
 894:	22 e0       	ldi	r18, 0x02	; 2
 896:	42 0e       	add	r4, r18
 898:	51 1c       	adc	r5, r1
 89a:	f8 01       	movw	r30, r16
 89c:	a0 80       	ld	r10, Z
 89e:	b1 80       	ldd	r11, Z+1	; 0x01
 8a0:	36 fe       	sbrs	r3, 6
 8a2:	03 c0       	rjmp	.+6      	; 0x8aa <vfprintf+0x174>
 8a4:	69 2d       	mov	r22, r9
 8a6:	70 e0       	ldi	r23, 0x00	; 0
 8a8:	02 c0       	rjmp	.+4      	; 0x8ae <vfprintf+0x178>
 8aa:	6f ef       	ldi	r22, 0xFF	; 255
 8ac:	7f ef       	ldi	r23, 0xFF	; 255
 8ae:	c5 01       	movw	r24, r10
 8b0:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <strnlen_P>
 8b4:	4c 01       	movw	r8, r24
 8b6:	f3 2d       	mov	r31, r3
 8b8:	f0 68       	ori	r31, 0x80	; 128
 8ba:	3f 2e       	mov	r3, r31
 8bc:	82 01       	movw	r16, r4
 8be:	33 fc       	sbrc	r3, 3
 8c0:	1b c0       	rjmp	.+54     	; 0x8f8 <vfprintf+0x1c2>
 8c2:	82 2d       	mov	r24, r2
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	88 16       	cp	r8, r24
 8c8:	99 06       	cpc	r9, r25
 8ca:	b0 f4       	brcc	.+44     	; 0x8f8 <vfprintf+0x1c2>
 8cc:	b6 01       	movw	r22, r12
 8ce:	80 e2       	ldi	r24, 0x20	; 32
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	0e 94 92 05 	call	0xb24	; 0xb24 <fputc>
 8d6:	2a 94       	dec	r2
 8d8:	f4 cf       	rjmp	.-24     	; 0x8c2 <vfprintf+0x18c>
 8da:	f5 01       	movw	r30, r10
 8dc:	37 fc       	sbrc	r3, 7
 8de:	85 91       	lpm	r24, Z+
 8e0:	37 fe       	sbrs	r3, 7
 8e2:	81 91       	ld	r24, Z+
 8e4:	5f 01       	movw	r10, r30
 8e6:	b6 01       	movw	r22, r12
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	0e 94 92 05 	call	0xb24	; 0xb24 <fputc>
 8ee:	21 10       	cpse	r2, r1
 8f0:	2a 94       	dec	r2
 8f2:	21 e0       	ldi	r18, 0x01	; 1
 8f4:	82 1a       	sub	r8, r18
 8f6:	91 08       	sbc	r9, r1
 8f8:	81 14       	cp	r8, r1
 8fa:	91 04       	cpc	r9, r1
 8fc:	71 f7       	brne	.-36     	; 0x8da <vfprintf+0x1a4>
 8fe:	e8 c0       	rjmp	.+464    	; 0xad0 <__stack+0x1d1>
 900:	84 36       	cpi	r24, 0x64	; 100
 902:	11 f0       	breq	.+4      	; 0x908 <__stack+0x9>
 904:	89 36       	cpi	r24, 0x69	; 105
 906:	41 f5       	brne	.+80     	; 0x958 <__stack+0x59>
 908:	f8 01       	movw	r30, r16
 90a:	37 fe       	sbrs	r3, 7
 90c:	07 c0       	rjmp	.+14     	; 0x91c <__stack+0x1d>
 90e:	60 81       	ld	r22, Z
 910:	71 81       	ldd	r23, Z+1	; 0x01
 912:	82 81       	ldd	r24, Z+2	; 0x02
 914:	93 81       	ldd	r25, Z+3	; 0x03
 916:	0c 5f       	subi	r16, 0xFC	; 252
 918:	1f 4f       	sbci	r17, 0xFF	; 255
 91a:	08 c0       	rjmp	.+16     	; 0x92c <__stack+0x2d>
 91c:	60 81       	ld	r22, Z
 91e:	71 81       	ldd	r23, Z+1	; 0x01
 920:	07 2e       	mov	r0, r23
 922:	00 0c       	add	r0, r0
 924:	88 0b       	sbc	r24, r24
 926:	99 0b       	sbc	r25, r25
 928:	0e 5f       	subi	r16, 0xFE	; 254
 92a:	1f 4f       	sbci	r17, 0xFF	; 255
 92c:	f3 2d       	mov	r31, r3
 92e:	ff 76       	andi	r31, 0x6F	; 111
 930:	3f 2e       	mov	r3, r31
 932:	97 ff       	sbrs	r25, 7
 934:	09 c0       	rjmp	.+18     	; 0x948 <__stack+0x49>
 936:	90 95       	com	r25
 938:	80 95       	com	r24
 93a:	70 95       	com	r23
 93c:	61 95       	neg	r22
 93e:	7f 4f       	sbci	r23, 0xFF	; 255
 940:	8f 4f       	sbci	r24, 0xFF	; 255
 942:	9f 4f       	sbci	r25, 0xFF	; 255
 944:	f0 68       	ori	r31, 0x80	; 128
 946:	3f 2e       	mov	r3, r31
 948:	2a e0       	ldi	r18, 0x0A	; 10
 94a:	30 e0       	ldi	r19, 0x00	; 0
 94c:	a3 01       	movw	r20, r6
 94e:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__ultoa_invert>
 952:	88 2e       	mov	r8, r24
 954:	86 18       	sub	r8, r6
 956:	45 c0       	rjmp	.+138    	; 0x9e2 <__stack+0xe3>
 958:	85 37       	cpi	r24, 0x75	; 117
 95a:	31 f4       	brne	.+12     	; 0x968 <__stack+0x69>
 95c:	23 2d       	mov	r18, r3
 95e:	2f 7e       	andi	r18, 0xEF	; 239
 960:	b2 2e       	mov	r11, r18
 962:	2a e0       	ldi	r18, 0x0A	; 10
 964:	30 e0       	ldi	r19, 0x00	; 0
 966:	25 c0       	rjmp	.+74     	; 0x9b2 <__stack+0xb3>
 968:	93 2d       	mov	r25, r3
 96a:	99 7f       	andi	r25, 0xF9	; 249
 96c:	b9 2e       	mov	r11, r25
 96e:	8f 36       	cpi	r24, 0x6F	; 111
 970:	c1 f0       	breq	.+48     	; 0x9a2 <__stack+0xa3>
 972:	18 f4       	brcc	.+6      	; 0x97a <__stack+0x7b>
 974:	88 35       	cpi	r24, 0x58	; 88
 976:	79 f0       	breq	.+30     	; 0x996 <__stack+0x97>
 978:	b5 c0       	rjmp	.+362    	; 0xae4 <__stack+0x1e5>
 97a:	80 37       	cpi	r24, 0x70	; 112
 97c:	19 f0       	breq	.+6      	; 0x984 <__stack+0x85>
 97e:	88 37       	cpi	r24, 0x78	; 120
 980:	21 f0       	breq	.+8      	; 0x98a <__stack+0x8b>
 982:	b0 c0       	rjmp	.+352    	; 0xae4 <__stack+0x1e5>
 984:	e9 2f       	mov	r30, r25
 986:	e0 61       	ori	r30, 0x10	; 16
 988:	be 2e       	mov	r11, r30
 98a:	b4 fe       	sbrs	r11, 4
 98c:	0d c0       	rjmp	.+26     	; 0x9a8 <__stack+0xa9>
 98e:	fb 2d       	mov	r31, r11
 990:	f4 60       	ori	r31, 0x04	; 4
 992:	bf 2e       	mov	r11, r31
 994:	09 c0       	rjmp	.+18     	; 0x9a8 <__stack+0xa9>
 996:	34 fe       	sbrs	r3, 4
 998:	0a c0       	rjmp	.+20     	; 0x9ae <__stack+0xaf>
 99a:	29 2f       	mov	r18, r25
 99c:	26 60       	ori	r18, 0x06	; 6
 99e:	b2 2e       	mov	r11, r18
 9a0:	06 c0       	rjmp	.+12     	; 0x9ae <__stack+0xaf>
 9a2:	28 e0       	ldi	r18, 0x08	; 8
 9a4:	30 e0       	ldi	r19, 0x00	; 0
 9a6:	05 c0       	rjmp	.+10     	; 0x9b2 <__stack+0xb3>
 9a8:	20 e1       	ldi	r18, 0x10	; 16
 9aa:	30 e0       	ldi	r19, 0x00	; 0
 9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <__stack+0xb3>
 9ae:	20 e1       	ldi	r18, 0x10	; 16
 9b0:	32 e0       	ldi	r19, 0x02	; 2
 9b2:	f8 01       	movw	r30, r16
 9b4:	b7 fe       	sbrs	r11, 7
 9b6:	07 c0       	rjmp	.+14     	; 0x9c6 <__stack+0xc7>
 9b8:	60 81       	ld	r22, Z
 9ba:	71 81       	ldd	r23, Z+1	; 0x01
 9bc:	82 81       	ldd	r24, Z+2	; 0x02
 9be:	93 81       	ldd	r25, Z+3	; 0x03
 9c0:	0c 5f       	subi	r16, 0xFC	; 252
 9c2:	1f 4f       	sbci	r17, 0xFF	; 255
 9c4:	06 c0       	rjmp	.+12     	; 0x9d2 <__stack+0xd3>
 9c6:	60 81       	ld	r22, Z
 9c8:	71 81       	ldd	r23, Z+1	; 0x01
 9ca:	80 e0       	ldi	r24, 0x00	; 0
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	0e 5f       	subi	r16, 0xFE	; 254
 9d0:	1f 4f       	sbci	r17, 0xFF	; 255
 9d2:	a3 01       	movw	r20, r6
 9d4:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__ultoa_invert>
 9d8:	88 2e       	mov	r8, r24
 9da:	86 18       	sub	r8, r6
 9dc:	fb 2d       	mov	r31, r11
 9de:	ff 77       	andi	r31, 0x7F	; 127
 9e0:	3f 2e       	mov	r3, r31
 9e2:	36 fe       	sbrs	r3, 6
 9e4:	0d c0       	rjmp	.+26     	; 0xa00 <__stack+0x101>
 9e6:	23 2d       	mov	r18, r3
 9e8:	2e 7f       	andi	r18, 0xFE	; 254
 9ea:	a2 2e       	mov	r10, r18
 9ec:	89 14       	cp	r8, r9
 9ee:	58 f4       	brcc	.+22     	; 0xa06 <__stack+0x107>
 9f0:	34 fe       	sbrs	r3, 4
 9f2:	0b c0       	rjmp	.+22     	; 0xa0a <__stack+0x10b>
 9f4:	32 fc       	sbrc	r3, 2
 9f6:	09 c0       	rjmp	.+18     	; 0xa0a <__stack+0x10b>
 9f8:	83 2d       	mov	r24, r3
 9fa:	8e 7e       	andi	r24, 0xEE	; 238
 9fc:	a8 2e       	mov	r10, r24
 9fe:	05 c0       	rjmp	.+10     	; 0xa0a <__stack+0x10b>
 a00:	b8 2c       	mov	r11, r8
 a02:	a3 2c       	mov	r10, r3
 a04:	03 c0       	rjmp	.+6      	; 0xa0c <__stack+0x10d>
 a06:	b8 2c       	mov	r11, r8
 a08:	01 c0       	rjmp	.+2      	; 0xa0c <__stack+0x10d>
 a0a:	b9 2c       	mov	r11, r9
 a0c:	a4 fe       	sbrs	r10, 4
 a0e:	0f c0       	rjmp	.+30     	; 0xa2e <__stack+0x12f>
 a10:	fe 01       	movw	r30, r28
 a12:	e8 0d       	add	r30, r8
 a14:	f1 1d       	adc	r31, r1
 a16:	80 81       	ld	r24, Z
 a18:	80 33       	cpi	r24, 0x30	; 48
 a1a:	21 f4       	brne	.+8      	; 0xa24 <__stack+0x125>
 a1c:	9a 2d       	mov	r25, r10
 a1e:	99 7e       	andi	r25, 0xE9	; 233
 a20:	a9 2e       	mov	r10, r25
 a22:	09 c0       	rjmp	.+18     	; 0xa36 <__stack+0x137>
 a24:	a2 fe       	sbrs	r10, 2
 a26:	06 c0       	rjmp	.+12     	; 0xa34 <__stack+0x135>
 a28:	b3 94       	inc	r11
 a2a:	b3 94       	inc	r11
 a2c:	04 c0       	rjmp	.+8      	; 0xa36 <__stack+0x137>
 a2e:	8a 2d       	mov	r24, r10
 a30:	86 78       	andi	r24, 0x86	; 134
 a32:	09 f0       	breq	.+2      	; 0xa36 <__stack+0x137>
 a34:	b3 94       	inc	r11
 a36:	a3 fc       	sbrc	r10, 3
 a38:	11 c0       	rjmp	.+34     	; 0xa5c <__stack+0x15d>
 a3a:	a0 fe       	sbrs	r10, 0
 a3c:	06 c0       	rjmp	.+12     	; 0xa4a <__stack+0x14b>
 a3e:	b2 14       	cp	r11, r2
 a40:	88 f4       	brcc	.+34     	; 0xa64 <__stack+0x165>
 a42:	28 0c       	add	r2, r8
 a44:	92 2c       	mov	r9, r2
 a46:	9b 18       	sub	r9, r11
 a48:	0e c0       	rjmp	.+28     	; 0xa66 <__stack+0x167>
 a4a:	b2 14       	cp	r11, r2
 a4c:	60 f4       	brcc	.+24     	; 0xa66 <__stack+0x167>
 a4e:	b6 01       	movw	r22, r12
 a50:	80 e2       	ldi	r24, 0x20	; 32
 a52:	90 e0       	ldi	r25, 0x00	; 0
 a54:	0e 94 92 05 	call	0xb24	; 0xb24 <fputc>
 a58:	b3 94       	inc	r11
 a5a:	f7 cf       	rjmp	.-18     	; 0xa4a <__stack+0x14b>
 a5c:	b2 14       	cp	r11, r2
 a5e:	18 f4       	brcc	.+6      	; 0xa66 <__stack+0x167>
 a60:	2b 18       	sub	r2, r11
 a62:	02 c0       	rjmp	.+4      	; 0xa68 <__stack+0x169>
 a64:	98 2c       	mov	r9, r8
 a66:	21 2c       	mov	r2, r1
 a68:	a4 fe       	sbrs	r10, 4
 a6a:	10 c0       	rjmp	.+32     	; 0xa8c <__stack+0x18d>
 a6c:	b6 01       	movw	r22, r12
 a6e:	80 e3       	ldi	r24, 0x30	; 48
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	0e 94 92 05 	call	0xb24	; 0xb24 <fputc>
 a76:	a2 fe       	sbrs	r10, 2
 a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__stack+0x1a9>
 a7a:	a1 fc       	sbrc	r10, 1
 a7c:	03 c0       	rjmp	.+6      	; 0xa84 <__stack+0x185>
 a7e:	88 e7       	ldi	r24, 0x78	; 120
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	02 c0       	rjmp	.+4      	; 0xa88 <__stack+0x189>
 a84:	88 e5       	ldi	r24, 0x58	; 88
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	b6 01       	movw	r22, r12
 a8a:	0c c0       	rjmp	.+24     	; 0xaa4 <__stack+0x1a5>
 a8c:	8a 2d       	mov	r24, r10
 a8e:	86 78       	andi	r24, 0x86	; 134
 a90:	59 f0       	breq	.+22     	; 0xaa8 <__stack+0x1a9>
 a92:	a1 fe       	sbrs	r10, 1
 a94:	02 c0       	rjmp	.+4      	; 0xa9a <__stack+0x19b>
 a96:	8b e2       	ldi	r24, 0x2B	; 43
 a98:	01 c0       	rjmp	.+2      	; 0xa9c <__stack+0x19d>
 a9a:	80 e2       	ldi	r24, 0x20	; 32
 a9c:	a7 fc       	sbrc	r10, 7
 a9e:	8d e2       	ldi	r24, 0x2D	; 45
 aa0:	b6 01       	movw	r22, r12
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	0e 94 92 05 	call	0xb24	; 0xb24 <fputc>
 aa8:	89 14       	cp	r8, r9
 aaa:	38 f4       	brcc	.+14     	; 0xaba <__stack+0x1bb>
 aac:	b6 01       	movw	r22, r12
 aae:	80 e3       	ldi	r24, 0x30	; 48
 ab0:	90 e0       	ldi	r25, 0x00	; 0
 ab2:	0e 94 92 05 	call	0xb24	; 0xb24 <fputc>
 ab6:	9a 94       	dec	r9
 ab8:	f7 cf       	rjmp	.-18     	; 0xaa8 <__stack+0x1a9>
 aba:	8a 94       	dec	r8
 abc:	f3 01       	movw	r30, r6
 abe:	e8 0d       	add	r30, r8
 ac0:	f1 1d       	adc	r31, r1
 ac2:	80 81       	ld	r24, Z
 ac4:	b6 01       	movw	r22, r12
 ac6:	90 e0       	ldi	r25, 0x00	; 0
 ac8:	0e 94 92 05 	call	0xb24	; 0xb24 <fputc>
 acc:	81 10       	cpse	r8, r1
 ace:	f5 cf       	rjmp	.-22     	; 0xaba <__stack+0x1bb>
 ad0:	22 20       	and	r2, r2
 ad2:	09 f4       	brne	.+2      	; 0xad6 <__stack+0x1d7>
 ad4:	42 ce       	rjmp	.-892    	; 0x75a <vfprintf+0x24>
 ad6:	b6 01       	movw	r22, r12
 ad8:	80 e2       	ldi	r24, 0x20	; 32
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	0e 94 92 05 	call	0xb24	; 0xb24 <fputc>
 ae0:	2a 94       	dec	r2
 ae2:	f6 cf       	rjmp	.-20     	; 0xad0 <__stack+0x1d1>
 ae4:	f6 01       	movw	r30, r12
 ae6:	86 81       	ldd	r24, Z+6	; 0x06
 ae8:	97 81       	ldd	r25, Z+7	; 0x07
 aea:	02 c0       	rjmp	.+4      	; 0xaf0 <__stack+0x1f1>
 aec:	8f ef       	ldi	r24, 0xFF	; 255
 aee:	9f ef       	ldi	r25, 0xFF	; 255
 af0:	2b 96       	adiw	r28, 0x0b	; 11
 af2:	e2 e1       	ldi	r30, 0x12	; 18
 af4:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__epilogue_restores__>

00000af8 <strnlen_P>:
 af8:	fc 01       	movw	r30, r24
 afa:	05 90       	lpm	r0, Z+
 afc:	61 50       	subi	r22, 0x01	; 1
 afe:	70 40       	sbci	r23, 0x00	; 0
 b00:	01 10       	cpse	r0, r1
 b02:	d8 f7       	brcc	.-10     	; 0xafa <strnlen_P+0x2>
 b04:	80 95       	com	r24
 b06:	90 95       	com	r25
 b08:	8e 0f       	add	r24, r30
 b0a:	9f 1f       	adc	r25, r31
 b0c:	08 95       	ret

00000b0e <strnlen>:
 b0e:	fc 01       	movw	r30, r24
 b10:	61 50       	subi	r22, 0x01	; 1
 b12:	70 40       	sbci	r23, 0x00	; 0
 b14:	01 90       	ld	r0, Z+
 b16:	01 10       	cpse	r0, r1
 b18:	d8 f7       	brcc	.-10     	; 0xb10 <strnlen+0x2>
 b1a:	80 95       	com	r24
 b1c:	90 95       	com	r25
 b1e:	8e 0f       	add	r24, r30
 b20:	9f 1f       	adc	r25, r31
 b22:	08 95       	ret

00000b24 <fputc>:
 b24:	0f 93       	push	r16
 b26:	1f 93       	push	r17
 b28:	cf 93       	push	r28
 b2a:	df 93       	push	r29
 b2c:	fb 01       	movw	r30, r22
 b2e:	23 81       	ldd	r18, Z+3	; 0x03
 b30:	21 fd       	sbrc	r18, 1
 b32:	03 c0       	rjmp	.+6      	; 0xb3a <fputc+0x16>
 b34:	8f ef       	ldi	r24, 0xFF	; 255
 b36:	9f ef       	ldi	r25, 0xFF	; 255
 b38:	2c c0       	rjmp	.+88     	; 0xb92 <fputc+0x6e>
 b3a:	22 ff       	sbrs	r18, 2
 b3c:	16 c0       	rjmp	.+44     	; 0xb6a <fputc+0x46>
 b3e:	46 81       	ldd	r20, Z+6	; 0x06
 b40:	57 81       	ldd	r21, Z+7	; 0x07
 b42:	24 81       	ldd	r18, Z+4	; 0x04
 b44:	35 81       	ldd	r19, Z+5	; 0x05
 b46:	42 17       	cp	r20, r18
 b48:	53 07       	cpc	r21, r19
 b4a:	44 f4       	brge	.+16     	; 0xb5c <fputc+0x38>
 b4c:	a0 81       	ld	r26, Z
 b4e:	b1 81       	ldd	r27, Z+1	; 0x01
 b50:	9d 01       	movw	r18, r26
 b52:	2f 5f       	subi	r18, 0xFF	; 255
 b54:	3f 4f       	sbci	r19, 0xFF	; 255
 b56:	31 83       	std	Z+1, r19	; 0x01
 b58:	20 83       	st	Z, r18
 b5a:	8c 93       	st	X, r24
 b5c:	26 81       	ldd	r18, Z+6	; 0x06
 b5e:	37 81       	ldd	r19, Z+7	; 0x07
 b60:	2f 5f       	subi	r18, 0xFF	; 255
 b62:	3f 4f       	sbci	r19, 0xFF	; 255
 b64:	37 83       	std	Z+7, r19	; 0x07
 b66:	26 83       	std	Z+6, r18	; 0x06
 b68:	14 c0       	rjmp	.+40     	; 0xb92 <fputc+0x6e>
 b6a:	8b 01       	movw	r16, r22
 b6c:	ec 01       	movw	r28, r24
 b6e:	fb 01       	movw	r30, r22
 b70:	00 84       	ldd	r0, Z+8	; 0x08
 b72:	f1 85       	ldd	r31, Z+9	; 0x09
 b74:	e0 2d       	mov	r30, r0
 b76:	09 95       	icall
 b78:	89 2b       	or	r24, r25
 b7a:	e1 f6       	brne	.-72     	; 0xb34 <fputc+0x10>
 b7c:	d8 01       	movw	r26, r16
 b7e:	16 96       	adiw	r26, 0x06	; 6
 b80:	8d 91       	ld	r24, X+
 b82:	9c 91       	ld	r25, X
 b84:	17 97       	sbiw	r26, 0x07	; 7
 b86:	01 96       	adiw	r24, 0x01	; 1
 b88:	17 96       	adiw	r26, 0x07	; 7
 b8a:	9c 93       	st	X, r25
 b8c:	8e 93       	st	-X, r24
 b8e:	16 97       	sbiw	r26, 0x06	; 6
 b90:	ce 01       	movw	r24, r28
 b92:	df 91       	pop	r29
 b94:	cf 91       	pop	r28
 b96:	1f 91       	pop	r17
 b98:	0f 91       	pop	r16
 b9a:	08 95       	ret

00000b9c <__ultoa_invert>:
 b9c:	fa 01       	movw	r30, r20
 b9e:	aa 27       	eor	r26, r26
 ba0:	28 30       	cpi	r18, 0x08	; 8
 ba2:	51 f1       	breq	.+84     	; 0xbf8 <__ultoa_invert+0x5c>
 ba4:	20 31       	cpi	r18, 0x10	; 16
 ba6:	81 f1       	breq	.+96     	; 0xc08 <__ultoa_invert+0x6c>
 ba8:	e8 94       	clt
 baa:	6f 93       	push	r22
 bac:	6e 7f       	andi	r22, 0xFE	; 254
 bae:	6e 5f       	subi	r22, 0xFE	; 254
 bb0:	7f 4f       	sbci	r23, 0xFF	; 255
 bb2:	8f 4f       	sbci	r24, 0xFF	; 255
 bb4:	9f 4f       	sbci	r25, 0xFF	; 255
 bb6:	af 4f       	sbci	r26, 0xFF	; 255
 bb8:	b1 e0       	ldi	r27, 0x01	; 1
 bba:	3e d0       	rcall	.+124    	; 0xc38 <__ultoa_invert+0x9c>
 bbc:	b4 e0       	ldi	r27, 0x04	; 4
 bbe:	3c d0       	rcall	.+120    	; 0xc38 <__ultoa_invert+0x9c>
 bc0:	67 0f       	add	r22, r23
 bc2:	78 1f       	adc	r23, r24
 bc4:	89 1f       	adc	r24, r25
 bc6:	9a 1f       	adc	r25, r26
 bc8:	a1 1d       	adc	r26, r1
 bca:	68 0f       	add	r22, r24
 bcc:	79 1f       	adc	r23, r25
 bce:	8a 1f       	adc	r24, r26
 bd0:	91 1d       	adc	r25, r1
 bd2:	a1 1d       	adc	r26, r1
 bd4:	6a 0f       	add	r22, r26
 bd6:	71 1d       	adc	r23, r1
 bd8:	81 1d       	adc	r24, r1
 bda:	91 1d       	adc	r25, r1
 bdc:	a1 1d       	adc	r26, r1
 bde:	20 d0       	rcall	.+64     	; 0xc20 <__ultoa_invert+0x84>
 be0:	09 f4       	brne	.+2      	; 0xbe4 <__ultoa_invert+0x48>
 be2:	68 94       	set
 be4:	3f 91       	pop	r19
 be6:	2a e0       	ldi	r18, 0x0A	; 10
 be8:	26 9f       	mul	r18, r22
 bea:	11 24       	eor	r1, r1
 bec:	30 19       	sub	r19, r0
 bee:	30 5d       	subi	r19, 0xD0	; 208
 bf0:	31 93       	st	Z+, r19
 bf2:	de f6       	brtc	.-74     	; 0xbaa <__ultoa_invert+0xe>
 bf4:	cf 01       	movw	r24, r30
 bf6:	08 95       	ret
 bf8:	46 2f       	mov	r20, r22
 bfa:	47 70       	andi	r20, 0x07	; 7
 bfc:	40 5d       	subi	r20, 0xD0	; 208
 bfe:	41 93       	st	Z+, r20
 c00:	b3 e0       	ldi	r27, 0x03	; 3
 c02:	0f d0       	rcall	.+30     	; 0xc22 <__ultoa_invert+0x86>
 c04:	c9 f7       	brne	.-14     	; 0xbf8 <__ultoa_invert+0x5c>
 c06:	f6 cf       	rjmp	.-20     	; 0xbf4 <__ultoa_invert+0x58>
 c08:	46 2f       	mov	r20, r22
 c0a:	4f 70       	andi	r20, 0x0F	; 15
 c0c:	40 5d       	subi	r20, 0xD0	; 208
 c0e:	4a 33       	cpi	r20, 0x3A	; 58
 c10:	18 f0       	brcs	.+6      	; 0xc18 <__ultoa_invert+0x7c>
 c12:	49 5d       	subi	r20, 0xD9	; 217
 c14:	31 fd       	sbrc	r19, 1
 c16:	40 52       	subi	r20, 0x20	; 32
 c18:	41 93       	st	Z+, r20
 c1a:	02 d0       	rcall	.+4      	; 0xc20 <__ultoa_invert+0x84>
 c1c:	a9 f7       	brne	.-22     	; 0xc08 <__ultoa_invert+0x6c>
 c1e:	ea cf       	rjmp	.-44     	; 0xbf4 <__ultoa_invert+0x58>
 c20:	b4 e0       	ldi	r27, 0x04	; 4
 c22:	a6 95       	lsr	r26
 c24:	97 95       	ror	r25
 c26:	87 95       	ror	r24
 c28:	77 95       	ror	r23
 c2a:	67 95       	ror	r22
 c2c:	ba 95       	dec	r27
 c2e:	c9 f7       	brne	.-14     	; 0xc22 <__ultoa_invert+0x86>
 c30:	00 97       	sbiw	r24, 0x00	; 0
 c32:	61 05       	cpc	r22, r1
 c34:	71 05       	cpc	r23, r1
 c36:	08 95       	ret
 c38:	9b 01       	movw	r18, r22
 c3a:	ac 01       	movw	r20, r24
 c3c:	0a 2e       	mov	r0, r26
 c3e:	06 94       	lsr	r0
 c40:	57 95       	ror	r21
 c42:	47 95       	ror	r20
 c44:	37 95       	ror	r19
 c46:	27 95       	ror	r18
 c48:	ba 95       	dec	r27
 c4a:	c9 f7       	brne	.-14     	; 0xc3e <__ultoa_invert+0xa2>
 c4c:	62 0f       	add	r22, r18
 c4e:	73 1f       	adc	r23, r19
 c50:	84 1f       	adc	r24, r20
 c52:	95 1f       	adc	r25, r21
 c54:	a0 1d       	adc	r26, r0
 c56:	08 95       	ret

00000c58 <__prologue_saves__>:
 c58:	2f 92       	push	r2
 c5a:	3f 92       	push	r3
 c5c:	4f 92       	push	r4
 c5e:	5f 92       	push	r5
 c60:	6f 92       	push	r6
 c62:	7f 92       	push	r7
 c64:	8f 92       	push	r8
 c66:	9f 92       	push	r9
 c68:	af 92       	push	r10
 c6a:	bf 92       	push	r11
 c6c:	cf 92       	push	r12
 c6e:	df 92       	push	r13
 c70:	ef 92       	push	r14
 c72:	ff 92       	push	r15
 c74:	0f 93       	push	r16
 c76:	1f 93       	push	r17
 c78:	cf 93       	push	r28
 c7a:	df 93       	push	r29
 c7c:	cd b7       	in	r28, 0x3d	; 61
 c7e:	de b7       	in	r29, 0x3e	; 62
 c80:	ca 1b       	sub	r28, r26
 c82:	db 0b       	sbc	r29, r27
 c84:	0f b6       	in	r0, 0x3f	; 63
 c86:	f8 94       	cli
 c88:	de bf       	out	0x3e, r29	; 62
 c8a:	0f be       	out	0x3f, r0	; 63
 c8c:	cd bf       	out	0x3d, r28	; 61
 c8e:	09 94       	ijmp

00000c90 <__epilogue_restores__>:
 c90:	2a 88       	ldd	r2, Y+18	; 0x12
 c92:	39 88       	ldd	r3, Y+17	; 0x11
 c94:	48 88       	ldd	r4, Y+16	; 0x10
 c96:	5f 84       	ldd	r5, Y+15	; 0x0f
 c98:	6e 84       	ldd	r6, Y+14	; 0x0e
 c9a:	7d 84       	ldd	r7, Y+13	; 0x0d
 c9c:	8c 84       	ldd	r8, Y+12	; 0x0c
 c9e:	9b 84       	ldd	r9, Y+11	; 0x0b
 ca0:	aa 84       	ldd	r10, Y+10	; 0x0a
 ca2:	b9 84       	ldd	r11, Y+9	; 0x09
 ca4:	c8 84       	ldd	r12, Y+8	; 0x08
 ca6:	df 80       	ldd	r13, Y+7	; 0x07
 ca8:	ee 80       	ldd	r14, Y+6	; 0x06
 caa:	fd 80       	ldd	r15, Y+5	; 0x05
 cac:	0c 81       	ldd	r16, Y+4	; 0x04
 cae:	1b 81       	ldd	r17, Y+3	; 0x03
 cb0:	aa 81       	ldd	r26, Y+2	; 0x02
 cb2:	b9 81       	ldd	r27, Y+1	; 0x01
 cb4:	ce 0f       	add	r28, r30
 cb6:	d1 1d       	adc	r29, r1
 cb8:	0f b6       	in	r0, 0x3f	; 63
 cba:	f8 94       	cli
 cbc:	de bf       	out	0x3e, r29	; 62
 cbe:	0f be       	out	0x3f, r0	; 63
 cc0:	cd bf       	out	0x3d, r28	; 61
 cc2:	ed 01       	movw	r28, r26
 cc4:	08 95       	ret

00000cc6 <_exit>:
 cc6:	f8 94       	cli

00000cc8 <__stop_program>:
 cc8:	ff cf       	rjmp	.-2      	; 0xcc8 <__stop_program>
